/*======================================================================*
 DTS, Inc.
 5220 Las Virgenes Road
 Calabasas, CA 91302  USA

 CONFIDENTIAL: CONTAINS CONFIDENTIAL PROPRIETARY INFORMATION OWNED BY
 DTS, INC. AND/OR ITS AFFILIATES ("DTS"), INCLUDING BUT NOT LIMITED TO
 TRADE SECRETS, KNOW-HOW, TECHNICAL AND BUSINESS INFORMATION. USE,
 DISCLOSURE OR DISTRIBUTION OF THE SOFTWARE IN ANY FORM IS LIMITED TO
 SPECIFICALLY AUTHORIZED LICENSEES OF DTS.  ANY UNAUTHORIZED
 DISCLOSURE IS A VIOLATION OF STATE, FEDERAL, AND INTERNATIONAL LAWS.
 BOTH CIVIL AND CRIMINAL PENALTIES APPLY.

 DO NOT DUPLICATE. COPYRIGHT 2014, DTS, INC. ALL RIGHTS RESERVED.
 UNAUTHORIZED DUPLICATION IS A VIOLATION OF STATE, FEDERAL AND
 INTERNATIONAL LAWS.

 ALGORITHMS, DATA STRUCTURES AND METHODS CONTAINED IN THIS SOFTWARE
 MAY BE PROTECTED BY ONE OR MORE PATENTS OR PATENT APPLICATIONS.
 UNLESS OTHERWISE PROVIDED UNDER THE TERMS OF A FULLY-EXECUTED WRITTEN
 AGREEMENT BY AND BETWEEN THE RECIPIENT HEREOF AND DTS, THE FOLLOWING
 TERMS SHALL APPLY TO ANY USE OF THE SOFTWARE (THE "PRODUCT") AND, AS
 APPLICABLE, ANY RELATED DOCUMENTATION:  (i) ANY USE OF THE PRODUCT
 AND ANY RELATED DOCUMENTATION IS AT THE RECIPIENT'S SOLE RISK:
 (ii) THE PRODUCT AND ANY RELATED DOCUMENTATION ARE PROVIDED "AS IS"
 AND WITHOUT WARRANTY OF ANY KIND AND DTS EXPRESSLY DISCLAIMS ALL
 WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 PURPOSE, REGARDLESS OF WHETHER DTS KNOWS OR HAS REASON TO KNOW OF THE
 USER'S PARTICULAR NEEDS; (iii) DTS DOES NOT WARRANT THAT THE PRODUCT
 OR ANY RELATED DOCUMENTATION WILL MEET USER'S REQUIREMENTS, OR THAT
 DEFECTS IN THE PRODUCT OR ANY RELATED DOCUMENTATION WILL BE
 CORRECTED; (iv) DTS DOES NOT WARRANT THAT THE OPERATION OF ANY
 HARDWARE OR SOFTWARE ASSOCIATED WITH THIS DOCUMENT WILL BE
 UNINTERRUPTED OR ERROR-FREE; AND (v) UNDER NO CIRCUMSTANCES,
 INCLUDING NEGLIGENCE, SHALL DTS OR THE DIRECTORS, OFFICERS, EMPLOYEES,
 OR AGENTS OF DTS, BE LIABLE TO USER FOR ANY INCIDENTAL, INDIRECT,
 SPECIAL, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, AND LOSS
 OF BUSINESS INFORMATION) ARISING OUT OF THE USE, MISUSE, OR INABILITY
 TO USE THE PRODUCT OR ANY RELATED DOCUMENTATION.
*======================================================================*/

/********************************************************************************
 *	SRS Labs CONFIDENTIAL
 *	@Copyright 2010 by SRS Labs.
 *	All rights reserved.
 *
 *  Description:
 *  Exposes all srs_hp360 APIs
 *
 *	Author: Zesen Zhuang
 *
 *  RCS keywords:
 *	$Id: //srstech/srs_hp360/std_fxp/include/srs_hp360_api.h#6 $
 *  $Author: zesenz $
 *  $Date: 2011/01/20 $
 *	
********************************************************************************/

#ifndef __SRS_HP360_API_H__
#define __SRS_HP360_API_H__

//#include "srs_typedefs.h"
#include "srs_fxp.h"
#include "srs_hp360_def.h"


#ifdef __cplusplus
extern "C"{
#endif /*__cplusplus*/

//API declaration here:
int			SRS_Hp360_GetObjSize();
SRSResult	SRS_Hp360_CreateObj(SRSHp360Obj *pObj, void *pBuf, SRS_Allocator alloc,void* pContext);

SRSResult	SRS_Hp360_InitObj8k(SRSHp360Obj hp360Obj);
SRSResult	SRS_Hp360_InitObj11k(SRSHp360Obj hp360Obj);
SRSResult	SRS_Hp360_InitObj16k(SRSHp360Obj hp360Obj);
SRSResult	SRS_Hp360_InitObj22k(SRSHp360Obj hp360Obj);
SRSResult	SRS_Hp360_InitObj24k(SRSHp360Obj hp360Obj);
SRSResult	SRS_Hp360_InitObj32k(SRSHp360Obj hp360Obj);
SRSResult	SRS_Hp360_InitObj44k(SRSHp360Obj hp360Obj);
SRSResult	SRS_Hp360_InitObj48k(SRSHp360Obj hp360Obj);
SRSResult	SRS_Hp360_InitObj88k(SRSHp360Obj hp360Obj);
SRSResult	SRS_Hp360_InitObj96k(SRSHp360Obj hp360Obj);


/* main APIs */
/* the supported block size should be bigger than 25 */
SRSResult	SRS_Hp360_Process(SRSHp360Obj hp360Obj, SRS5Point1Ch *input, SRSStereoCh *output, int blockSamples, void *ws);

//"Set" functions:
void		SRS_Hp360_SetControlDefaults(SRSHp360Obj hp360Obj);
void		SRS_Hp360_SetEnable(SRSHp360Obj hp360Obj, SRSBool enable);
SRSResult	SRS_Hp360_SetInputGain(SRSHp360Obj hp360Obj, SRSInt16 gain);
SRSResult	SRS_Hp360_SetOutputGain(SRSHp360Obj hp360Obj, SRSInt16 gain);
SRSResult	SRS_Hp360_SetBypassGain(SRSHp360Obj hp360Obj, SRSInt16 gain);

//"Get" functions:
SRSBool		SRS_Hp360_GetEnable(SRSHp360Obj hp360Obj);
SRSInt16	SRS_Hp360_GetInputGain(SRSHp360Obj hp360Obj);
SRSInt16	SRS_Hp360_GetOutputGain(SRSHp360Obj hp360Obj);
SRSInt16	SRS_Hp360_GetBypassGain(SRSHp360Obj hp360Obj);

/* version info query function */
unsigned char	SRS_Hp360_GetTechVersion(SRSVersion which);
unsigned char	SRS_Hp360_GetLibVersion(SRSVersion which);

#ifdef __cplusplus
}
#endif /*__cplusplus*/



#endif /*__SRS_HP360_API_H__*/
